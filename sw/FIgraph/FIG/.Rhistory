th <- mean(result$weight)
if (!is.null(class.name)) th <- mean(result$weight[result$class==class.name])
}
result <- result[result$weight>=th,]
cat("th: ", th, "\n")
if (task=="regression") {
edges <- result
nodes <- data.frame(myimp)
} else {
edges <- result[result$class==class.name,-1]
nodes <- data.frame(myimp[myimp$class==class.name,-1])
}
edges
nodes
# Get Feature interation  & feature importance
result <- FIobj$Fint   # feature interaction table
myimp  <- FIobj$Fimp   # feature importance table
# filter low interaction
if(is.null(th)) {
th <- mean(result$weight)
if (!is.null(class.name)) th <- mean(result$weight[result$class==class.name])
}
result <- result[result$weight>=th,]
cat("th: ", th, "\n")
## Draw interaction Graph #############################################
if (task=="regression") {
edges <- result
nodes <- data.frame(myimp)
} else {
edges <- result[result$class==class.name,-1]
nodes <- data.frame(myimp[myimp$class==class.name,-1])
}
edges
result
myimp
result$class
class.name
if (task=="regression") {
edges <- result
nodes <- data.frame(myimp)
} else {
if(is.null(class.name)) {
edges <- result[,-1]
nodes <- data.frame(myimp[,-1])
} else {
edges <- result[result$class==class.name,-1]
nodes <- data.frame(myimp[myimp$class==class.name,-1])
}
}
edges
nodes
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=F)
# node size
impsize <- (V(net)$importance - min(V(net)$importance)) /
(max(V(net)$importance)-min(V(net)$importance))
impsize <- ((impsize/1.2)+0.2) *50
V(net)$size <- impsize # V(net)$importance*9  # node size
# node color
pal1 <- heat.colors(nrow(nodes), alpha=1)
idx <- (V(net)$importance - min(V(net)$importance)) /
(max(V(net)$importance)-min(V(net)$importance))
idx <- nrow(nodes)-as.integer(idx*(nrow(nodes)-1)+1)+1
V(net)$color <- pal1[idx]
E(net)$label <- edges$weight     # edge weight
#E(net)$label.cex=1
#E(net)$label.font=2
# edge width
ewidth <- (E(net)$weight - min(E(net)$weight)) /
(max(E(net)$weight)-min(E(net)$weight))
ewidth <- (ewidth + 0.2)*7
E(net)$width <- ewidth # edges$weight*20  # edge width
# edge color
E(net)$color <- "gray78"
E(net)$color[E(net)$width < 0] <- "orange"
# Draw graph
title <- ""
if (task=="classification") title <- paste0("class: ", class.name)
set.seed(101)
if(!show.edge.weight) {
elabel <- NA
} else {
elabel <- E(net)$value
}
if (gtype=="S") {  # static graph
plot(net, edge.arrow.size=.4, vertex.label=V(net)$nodes, edge.label=elabel,
main=title)
} else {            # interactive graph
id <- tkplot(net, edge.label=elabel)
#tk_close(id)
}
edges
nodes
class.name
install("FIG")   # library(devtools)
library(FIG)
FIobj3
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name="setosa",
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name="all",
show.edge.weight=T)
FIobj3 <- FItable(sv, train=iris, target.name="Species", all.class=T, grid=50, task="classification",
interaction_type="OH2")
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name="all",
show.edge.weight=T)
FIobj3
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name="all",
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name="qqq",
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name=NULL,
show.edge.weight=T)
FIobj3
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name=NULL,
show.edge.weight=T)
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name=NULL,
show.edge.weight=T)
FIobj3
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name=NULL,
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='all',
show.edge.weight=T)
FIobj3 <- FItable(sv, train=iris, target.name="Species", all.class=F, grid=50, task="classification",
interaction_type="OH2")
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='all',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='sa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
install("FIG")   # library(devtools)
library(FIG)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T, seed=101)
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T, seed=102)
data("Boston", package = "MASS")
myImp3 <- filterVarImp(x=Boston[,-14],y=Boston[,14])
###################################
library(caret)
library(mlbench)
myImp3 <- filterVarImp(x=Boston[,-14],y=Boston[,14])
aa <- import_caret_imp(myImp3, FIobj1)
aa
aa <- import_caret_imp(myImp3, FIobj1)
myImp3
myImp2 <- filterVarImp(x=iris[,-5],y=iris[,5])
myImp2
if (type=="regression") {
FItable.obj.new$Fimp[,2] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
FItable.obj.new$Fimp[i,2] <- caret.obj[idx,1]
}
} else {  # classification
FItable.obj.new$Fimp[,3] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
FItable.obj.new$Fimp[i,3] <- caret.obj[idx,FItable.obj.new$Fimp$class[i]]
}
}
import_caret_imp <- function(caret.obj, FItable.obj) {
type <- ifelse(ncol(FItable.obj$Fimp)==2, "regression", "classification")
FItable.obj.new = FItable.obj
if (type=="regression") {
FItable.obj.new$Fimp[,2] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
FItable.obj.new$Fimp[i,2] <- caret.obj[idx,1]
}
} else {  # classification
FItable.obj.new$Fimp[,3] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
FItable.obj.new$Fimp[i,3] <- caret.obj[idx,FItable.obj.new$Fimp$class[i]]
}
}
return(FItable.obj.new)
}
myImp2 <- filterVarImp(x=iris[,-5],y=iris[,5])
FIobj3
bb <- import_caret_imp(myImp2, FIobj3)
bb
myImp2
FIobj3 <- FItable(sv, train=iris, target.name="Species", all.class=T, grid=50, task="classification",
interaction_type="OH2")
bb <- import_caret_imp(myImp2, FIobj3)
myImp2
FIobj3
import_caret_imp <- function(caret.obj, FItable.obj) {
type <- ifelse(ncol(FItable.obj$Fimp)==2, "regression", "classification")
FItable.obj.new = FItable.obj
if (type=="regression") {
FItable.obj.new$Fimp[,2] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
FItable.obj.new$Fimp[i,2] <- caret.obj[idx,1]
}
} else {  # classification
FItable.obj.new$Fimp[,3] <- NA
for (i in 1:nrow(FItable.obj.new$Fimp)) {
idx <- which(rownames(caret.obj) == FItable.obj.new$Fimp$feature[i])
if (FItable.obj.new$Fimp$class[i] == "all") {
FItable.obj.new$Fimp[i,3] <- rowMeans(caret.obj[idx,])
} else {
FItable.obj.new$Fimp[i,3] <- caret.obj[idx,FItable.obj.new$Fimp$class[i]]
}
}
}
return(FItable.obj.new)
}
myImp2 <- filterVarImp(x=iris[,-5],y=iris[,5])
bb <- import_caret_imp(myImp2, FIobj3)
bb
FIobj3 <- FItable(sv, train=iris, target.name="Species", all.class=F, grid=50, task="classification",
interaction_type="OH2")
FIgraph(th=NULL, gtype="S", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T, seed=102)
myImp2 <- filterVarImp(x=iris[,-5],y=iris[,5])
bb <- import_caret_imp(myImp2, FIobj3)
bb
setwd("D:/lecture/FIG")
document()
setwd("D:/lecture/FIG")
rm(list=ls())
document()
library(devtools)
setwd("D:/lecture")
install("FIG")   # library(devtools)
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
library(e1071); library(pdp)
data(pima)
#sv <- svm(iris[,-5], iris$Species, probability = T)
pima <- pima[complete.cases(pima),]
sv <- svm(pima[,-9], pima$diabetes)
FIobj2 <- FItable(sv, train=iris, target.name="Species", grid=50, task="classification",
interaction_type="Greenwell")
names(pima)
FIobj2 <- FItable(sv, train=pima, target.name="diabetes", grid=50, task="classification",
interaction_type="OH2")
.rs.restartR()
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIobj1
c.name <- unique(iris$aa)
c.name
install("FIG")   # library(devtools)
.rs.restartR()   # session restart
library(FIG)
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
install("FIG")   # library(devtools)
.rs.restartR()   # session restart
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIgraph(gtype="S", FIobj=FIobj1, task="regression")
library(e1071); library(pdp)
data(pima)
#sv <- svm(iris[,-5], iris$Species, probability = T)
pima <- pima[complete.cases(pima),]
sv <- svm(pima[,-9], pima$diabetes)
FIobj2 <- FItable(sv, train=pima, target.name="diabetes", grid=50, task="classification",
interaction_type="OH2")
FIgraph(th=NULL, gtype="S", FIobj=FIobj2, task="classification", class.name="setosa",
show.edge.weight=T)
FIgraph(th=NULL, gtype="S", FIobj=FIobj2, task="classification", class.name="all",
show.edge.weight=T)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="S", FIobj=FIobj1, task="regression")
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
sv <- svm(iris[,-5], iris$Species)
FIobj3 <- FItable(sv, train=iris, target.name="Species", all.class=F, grid=50, task="classification",
interaction_type="OH2")
FIgraph(th=NULL, gtype="I", FIobj=FIobj3, task="classification", class.name='setosa',
show.edge.weight=T, seed=102)
names(iris)
model.1 <- svm(iris['Petal.Width'], iris$Species)
ds <- iris['Petal.Width']
model.1 <- svm(ds, iris$Species)
pred <- predict(model.1, ds)
acc.1 <- mean(pred==iris$Species)
acc.1
ds <- iris['Petal.Length']
model.2 <- svm(ds, iris$Species)
pred <- predict(model.2, ds)
acc.2 <- mean(pred==iris$Species)
acc.2
ds <- iris[,c('Petal.Width', 'Petal.Length')]
model.3 <- svm(ds, iris$Species)
pred <- predict(model.3, ds)
acc.3 <- mean(pred==iris$Species)
acc.3
ds <- iris['Petal.Width']
model.1 <- svm(ds, iris$Species)
pred <- predict(model.1, ds)
acc.1 <- mean(pred==iris$Species)
acc.1
ds <- iris['Petal.Length']
model.2 <- svm(ds, iris$Species)
pred <- predict(model.2, ds)
acc.2 <- mean(pred==iris$Species)
acc.2
ds <- iris[,c('Petal.Width', 'Petal.Length')]
model.3 <- svm(ds, iris$Species)
pred <- predict(model.3, ds)
acc.3 <- mean(pred==iris$Species)
acc.3
Boston[,-14]
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
pred <- predict(rf, Boston)
acc <- mean(abs(pred-Boston$medv))
acc
names(Boston)
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
pred <- predict(rf, Boston)
acc <- mean(abs(pred-Boston$medv))
acc
set.seed(100)
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
pred <- predict(rf, Boston)
acc <- mean(abs(pred-Boston$medv))
acc
set.seed(100)
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
pred <- predict(rf, Boston)
acc <- mean(abs(pred-Boston$medv))
acc
set.seed(100)
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
pred <- predict(rf, Boston)
acc <- mean(abs(pred-Boston$medv))
acc
set.seed(100)
bs2 <- Boston[,-c(4,12,2,9)]
rf2 <- randomForest(medv ~ ., data = bs2, ntree = 50)
pred <- predict(rf2, bs2)
acc2 <- mean(abs(pred-bs2$medv))
acc2
set.seed(100)
rf3 <- randomForest(medv ~ ., data = Boston, ntree = 500)
pred <- predict(rf3, Boston)
acc3 <- mean(abs(pred-Boston$medv))
acc3 # 0.9619215
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIobj3 <- FItable(rf3, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj3, task="regression")
names(Boston)
Boston2 = Boston[,c(1,6,7,10,11,13,14)]
Boston2
set.seed(100)
rf <- randomForest(medv ~ ., data = Boston2, ntree = 50)
pred <- predict(rf, Boston2)
acc <- mean(abs(pred-Boston2$medv))
acc # 0.9619215
set.seed(100)
rf3 <- randomForest(medv ~ ., data = Boston2, ntree = 500)
pred <- predict(rf3, Boston2)
acc3 <- mean(abs(pred-Boston2$medv))
acc3 # 0.9619215
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIobj1 <- FItable(rf, train=Boston2, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIobj3 <- FItable(rf3, train=Boston2, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(th=0.5560667, gtype="I", FIobj=FIobj3, task="regression")
# feature evaluation & selection
library(FSelector)
weights <- symmetrical.uncertainty(Species~., iris)
weights
subset <- cutoff.k(weights, 2)
subset
ds <- iris[,subset]
head(ds)
cl <- factor(iris$Species)
cl
## kfold cross validation
library(caret)
library(e1071)
library(randomForest)
library("FIG")
# for regression
data("Boston", package = "MASS")
model <- rpart(medv ~ ., data = Boston)
FIobj1 <- FItable(model, train=Boston, target.name="medv", grid=50,
task="regression", interaction_type="OH2")
print(FIobj1)
library(e1071)
model2 <- svm(Species~., data=iris)
FIobj2 <- FItable(model2, train=iris, target.name="Species", grid=50,
task="classification", interaction_type="OH2", all.class=F)
print(FIobj2)
FIgraph(gtype="S", FIobj=FIobj1, task="regression")
model <- lm(medv ~ ., data = Boston)
FIobj1 <- FItable(model, train=Boston, target.name="medv", grid=50,
task="regression", interaction_type="OH2")
print(FIobj1)
FIgraph(gtype="S", FIobj=FIobj1, task="regression")
FIgraph(th=NULL, gtype="I", FIobj=FIobj2, task="classification", class.name='setosa',
show.edge.weight=T, seed=102)
rm(list=ls())
setwd("D:/lecture/FIG")
document()
setwd("D:/lecture")
install("FIG")   # library(devtools)
.rs.restartR()   # session restart
library(FIG)
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
setwd("D:/lecture")
install("FIG")   # library(devtools)
.rs.restartR()   # session restart
library(FIG)
data("Boston", package = "MASS")
library("randomForest")
rf <- randomForest(medv ~ ., data = Boston, ntree = 50)
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIobj1 <- FItable(rf, train=Boston, target.name="medv", grid=50, task="regression",
interaction_type="OH2")
FIgraph(gtype="I", FIobj=FIobj1, task="regression")
library("FIG")
# for regression
data("Boston", package = "MASS")
model <- lm(medv ~ ., data = Boston)
FIobj <- FItable(model, train=Boston, target.name="medv", grid=50,
task="regression", interaction_type="OH2")
print(FIobj)
FIgraph(gtype="S", FIobj=FIobj, task="regression", seed=101)
# get feature importance from CARET
myImp <- filterVarImp(x=Boston[,-14], y=Boston[,14])  #  14th column is 'mdev'
FIobj.new <- import_caret_imp(myImp, FIobj)
FIgraph(gtype="S", FIobj=FIobj.new, task="regression")
rm(list=ls())
setwd("D:/lecture/FIG")
document()
setwd("D:/lecture")
install("FIG")   # library(devtools)
.rs.restartR()   # session restart
library(FIG)
